{"version":3,"sources":["TheOne/TheOne.tsx","Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","img/the-one.gif","img/leaves and shit.png"],"names":["TheOne","className","src","img","alt","withRouter","props","onClick","history","push","leaves","id","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oSAKe,SAASA,IACpB,OACI,yBAAKC,UAAU,gBACb,yBAAKC,IAAKC,IAAKC,IAAI,iB,0BCqBdC,mBAtBf,SAAcC,GAEV,OACI,yBAAKL,UAAU,aAAaM,QAchC,WACID,EAAME,QAAQC,KAAK,UAdf,yBAAKR,UAAW,mBACZ,yBAAKA,UAAU,sBACX,yBAAKC,IAAKQ,IAAQC,GAAG,YACrB,yBAAKV,UAAU,iBACX,yBAAKA,UAAU,eAAf,eACA,yBAAKC,IAAKC,IAAKC,IAAI,UAEvB,yBAAKF,IAAKQ,IAAQC,GAAG,kBCkB1BC,MAtBf,WAEE,OAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,UCfUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,qC,kBCA3CD,EAAOC,QAAU,IAA0B,8C","file":"static/js/main.1fed3879.chunk.js","sourcesContent":["import React from 'react';\nimport './TheOne.css';\n\nimport img from \"../img/the-one.gif\"; \n\nexport default function TheOne(){\n    return (\n        <div className=\"image_holder\">\n          <img src={img} alt=\"Smiley face\"></img>\n        </div>\n      );\n}","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./Home.css\"\nimport leaves from \"../img/leaves and shit.png\"\nimport img from \"../img/the-one.gif\"; \n\nfunction Home(props:any){\n\n    return (\n        <div className=\"home_outer\" onClick={onClick}>\n            <div className={\"home_outer_flex\"}>\n                <div className=\"home_outer_content\">\n                    <img src={leaves} id=\"leaves1\"></img>\n                    <div className=\"centerContent\">\n                        <div className=\"coming_soon\">Coming Soon</div>\n                        <img src={img} alt=\"nice\"></img>\n                    </div>\n                    <img src={leaves} id=\"leaves2\"></img>\n                </div>\n            </div>\n        </div>\n    );\n\n    function onClick(){\n        props.history.push(\"/gif\");\n    }\n}\n\nexport default withRouter(Home);","import React from 'react';\nimport logo from './logo.svg';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport TheOne from \"./TheOne/TheOne\";\nimport Home from \"./Home/Home\"\n\nfunction App() {\n\n  return (\n    \n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home></Home>\n        </Route>\n        <Route path=\"/home\">\n          <Home></Home>\n        </Route>\n        <Route path=\"/gif\">\n          <TheOne></TheOne>\n        </Route>\n      </Switch>\n    </Router>\n  );\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/the-one.2354f916.gif\";","module.exports = __webpack_public_path__ + \"static/media/leaves and shit.2f85bed8.png\";"],"sourceRoot":""}